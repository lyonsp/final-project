# Use the seq command to create a vector 'nums' with numbers 100 through 199
nums = seq(100,199)
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
first_ten = c(nums[1:10])
?paste
install.packages(stringr)
install.packages("stringr")
library(stringr)
6471 * 2 * pi
?paste
paste(name + "'s favorite movie is Harry Potter", sep = " ")
Paste(name + "'s favorite movie is Harry Potter", sep = " ")
Paste(name + "'s favorite movie is Harry Potter")
paste(name + "'s favorite movie is Harry Potter")
name <- Andrew Kan
name <- "Andrew Kan"
paste(name + "'s favorite movie is Harry Potter")
paste(name + "s favorite movie is Harry Potter")
paste(name, "s favorite movie is Harry Potter")
paste(name, "'s favorite movie is Harry Potter")
paste(name, "'s favorite movie is Harry Potter", sep = "")
nums <- [1:5]
nums <- {1:5}
one_two <- nums[1,2]
one_two <- nums[1:2]
better_vector <- c(nums, one_two)
length(name)
length(better_vector)
paste(table_mates[1], "is from", home_towns[1])
table_mates <- c("Nathan", "Peyton")
home_towns <- c("Davis", "Issaquah")
paste(table_mates[1], "is from", home_towns[1])
paste(table_mates[2], "is from", home_towns[1])
install.packages("stringr")
install.packages("stringr")
load(stringr)
library(stringr)
myIntro <- introduction(myName, myAge)
return(paste("Hello my name is", name, "and I'm", age, "years old"))
myAge <- 19
myName <- Andrew
myName <- "Andrew"
myAge <- 19
return(paste("Hello my name is", name, "and I'm", age, "years old"))
return(paste("Hello my name is", {name}, "and I'm", {age}, "years old"))
library(stringr)
myAge <- 19
myName <- "Andrew"
# Using multiplication, create a variable minutes_in_a_day that is equal to the number of minutes in a day
minutes_in_a_day <- 1440
# Working with functions -------------------------------
# Write a function called introduction that takes in two arguments, name, and age. This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
introduction <- function(name, age) {
return(paste("Hello my name is", {name}, "and I'm", {age}, "years old"))
}
# Create a variable myIntro by passing your variables myName and myAge into your introduction function
myIntro <- introduction(myName, myAge)
# Create a variable casualIntro by substituting "Hello, my name is ", with "Hey, I'm" in your myIntro variable
casualIntro <- sub("Hello, my name is", "Hey, I'm", x)
?sub
casualIntro <- sub("Hello, my name is", "Hey, I'm", myIntro)
capitalized <- str_to_title(myIntro)
View(introduction)
occurances <- str_count("e", myIntro)
occurances <- str_count(myIntro, "e")
twenty <- double(10)
twenty_seven <- third_power(3)
return (x * x * x)
third_power <- function(x) {
twenty_seven <- third_power(3)
twenty_seven <- third_power(3)
twenty <- double(10)
double <- function(x) {
double <- function(x) {
twenty <- double(10)
third_power <- function(x) {
twenty_seven <- third_power(3)
source('~/Documents/UW_2015_2016/INFO201/homework/hw2/a2-foundational-skills/assignment.r', echo=TRUE)
return (x * x * x)
twenty <- double(10)
library(stringr)
myAge <- 19
nums <- {1:5}
introduction <- function(name, age) {
return(paste("Hello my name is", {name}, "and I'm", {age}, "years old"))
}
# Create a variable myIntro by passing your variables myName and myAge into your introduction function
casualIntro <- sub("Hello, my name is", "Hey, I'm", myIntro)
shiny::runApp('Documents/UW_2015_2016/INFO201/finalGroup/final-project')
shiny::runApp('Documents/UW_2015_2016/INFO201/finalGroup/final-project')
shiny::runApp('Documents/UW_2015_2016/INFO201/finalGroup/final-project')
schoolData <- read.csv("finalSchoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
choose_call_group <- function(group) {
chosen_group <- only_2012 %>% filter(Event.Clearance.Group == group)
return(chosen_group)
}
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
make_choice <- function(choice) {
newschoolData <- schoolData %>% select_(choice)
return(newschoolData)
}
input$"free" == input$free
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
shinyServer(function(input, output) {
output$mymap2 <- renderLeaflet({
selected_call <- choose_call_group(input$select)
leaflet() %>%
addTiles() %>%
fitBounds(min(call_info$Longitude), min(call_info$Latitude),
max(call_info$Longitude), max(call_info$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
color = "blue",
radius = 3,
stroke = FALSE)
})
output$bargraph <- renderPlotly({
select_month(input$selectx)
})
output$mymap <- renderLeaflet({
selectedSchoolLevel <- selectSchoolLevel(input$selectlevel)
leaflet() %>%
addTiles() %>%
fitBounds(min(schoolData$longitude), min(schoolData$latitude),
max(schoolData$longitude), max(schoolData$latitude)) %>%
addCircleMarkers(lng = selectedSchoolLevel$longitude, lat = selectedSchoolLevel$latitude,
color = "red",
fillOpacity = .6,
radius = 5,
stroke = FALSE,
popup = schoolData$School.Name)
})
output$schoolDataChart <- renderPlotly ({
x <- list(
title = "School Names"
)
y <- list(
title = "Number of Students"
)
title <- list(
title = "Number of Students vs Number of Free Lunches"
)
#schoolDataOrdered <- schoolData %>%  arrange(desc(eval(parse(text = input$poop))))
#schoolDataLevel <- schoolData %>%  filter(schoolLevel == eval(parse(text = input$school_Level)))
numberOfStudents <- plot_ly(schoolData,
x = School.Name,
y = n,
name = "Number Of Students",
type = "bar"
)
numberOfFreeLunches <- add_trace(
numberOfStudents,
x = School.Name,
y  = eval(parse(text = input$poop)),
xaxis = (title = "hi"),
name = "Number of Percentage"
)
layout(numberOfFreeLunches,
barmode = "stack",
xaxis = x, yaxis = y,
title = title,
margin = list("b" = 150))
})
output$comparemap <- renderLeaflet({
selected_call <- choose_call_group(input$choose)
selected_sort <- make_choice(input$whichtype)
percentage <- eval(parse(text = input$whichtype), selected_sort)
leaflet() %>%
addTiles() %>%
fitBounds(min(call_info$Longitude), min(call_info$Latitude),
max(call_info$Longitude), max(call_info$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
radius = 3,
color = "blue",
stroke = FALSE,
fillOpacity = .5,
selected_call) %>%
addCircleMarkers(lng = schoolData$longitude, lat = schoolData$latitude,
radius = percentage * 10,
color = "red",
stroke = FALSE,
fillOpacity = .8,
popup = paste0(schoolData$School.Name, " ", round(percentage * 100, 3), "%"))
})
})
shiny::runApp('Documents/UW_2015_2016/INFO201/finalGroup/final-project')
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
shinyUI(navbarPage("Navbar!",
tabPanel("Intro",
includeMarkdown("testingOut.Rmd")),
tabPanel("911 Calls",
titlePanel("911 Call Data"),
sidebarPanel(selectInput("select", label = "Select Call Type",
choices = list("Burglary" = "BURGLARY",
"Liquor" = "LIQUOR VIOLATIONS",
"Assaults" = "ASSAULTS",
"Robbery" = "ROBBERY",
"Narcotics" = "NARCOTICS COMPLAINTS",
"Threats" = "THREATS, HARASSMENT",
"Homicide" = "HOMICIDE",
"Weapons" = "WEAPONS CALLS",
"Car Prowl" = "CAR PROWL",
"Shoplifting" = "SHOPLIFTING",
"Prostitution" = "PROSTITUTION"))
),
mainPanel("Locations of 911 Calls",
leafletOutput("mymap2")),
sidebarPanel(selectInput("selectx", label = "Select Month",
choices = list("Total" = "2012",
"January" = "^01/",
"February" = "^02/",
"March" = "^03/",
"April" = "^04/",
"May" = "^05/",
"June" = "^06/",
"July" = "^07/",
"August" = "^08/",
"September" = "^09/",
"October" = "^10/",
"November" = "^11/",
"December" = "^12/"),
selected = "2012")
),
mainPanel(plotlyOutput("bargraph"))
),
tabPanel("Seattle Schools",
sidebarPanel(
selectInput("selectlevel", label = "Select School Level",
choices = list("All" = "all",
"Elementary School" = "Elementary",
"Middle School" = "Middle School",
"High School" = "High School"))
),
mainPanel(leafletOutput("mymap")),
sidebarPanel(
selectInput("poop", label = "Percentage Level",
choices = list("Limited English" = "nlimeng",
"Free Lunches" = "nfree",
"Single Parents" = "noneparent"
)
)),
mainPanel(plotlyOutput("schoolDataChart"))
),
tabPanel("Comparison",
sidebarPanel(selectInput("choose", label = "Select Call Type",
choices = list("Assaults" = "ASSAULTS",
"Burglary" = "BURGLARY",
"Car Prowl" = "CAR PROWL",
"Homicide" = "HOMICIDE",
"Liquor" = "LIQUOR VIOLATIONS",
"Narcotics" = "NARCOTICS COMPLAINTS",
"Prostitution" = "PROSTITUTION",
"Robbery" = "ROBBERY",
"Shoplifting" = "SHOPLIFTING",
"Threats" = "THREATS, HARASSMENT",
"Weapons" = "WEAPONS CALLS"
)),
selectInput("whichtype", label = "Percentage Level",
choices = list("Free Lunches" = "free",
"Limited English" = "limeng",
"Single Parents" = "oneparent"),
selected = "free"
)),
mainPanel(leafletOutput("comparemap"))
),
tabPanel("Conclusion")
)
)
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
our_only_2012 <- filter(only_2012, grepl("BURGLARY|LIQUOR VIOLATIONS|
ASSAULTS|ROBBERY|NARCOTICS COMPLAINTS|
THREATS, HARASSMENT|HOMICIDE|WEAPONS CALLS|
CAR PROWL|SHOPLIFTING|PROSTITUTION",
Event.Clearance.Group))
select_month <- function(month) {
sorted_our_2012 <- our_only_2012 %>% group_by(Event.Clearance.Group) %>%
filter(grepl(month, Event.Clearance.Date)) %>%
summarise(total_calls = n()) %>% arrange(desc(total_calls))
summary_bar <- plot_ly(sorted_our_2012, type = "bar",
x = c(sorted_our_2012$Event.Clearance.Group),
y = c(sorted_our_2012$total_calls)) %>%
layout(title = "Call Type",
xaxis = list(title = "Call Type"),
yaxis = list(title = "Total Calls")) %>%
return()
}
shiny::runApp('Documents/UW_2015_2016/INFO201/finalGroup/final-project')
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
our_only_2012 <- filter(only_2012, grepl("BURGLARY|LIQUOR VIOLATIONS|
ASSAULTS|ROBBERY|NARCOTICS COMPLAINTS|
THREATS, HARASSMENT|HOMICIDE|WEAPONS CALLS|
CAR PROWL|SHOPLIFTING|PROSTITUTION",
Event.Clearance.Group))
select_month <- function(month) {
sorted_our_2012 <- our_only_2012 %>% group_by(Event.Clearance.Group) %>%
filter(grepl(month, Event.Clearance.Date)) %>%
summarise(total_calls = n()) %>% arrange(desc(total_calls))
summary_bar <- plot_ly(sorted_our_2012, type = "bar",
x = c(sorted_our_2012$Event.Clearance.Group),
y = c(sorted_our_2012$total_calls)) %>%
layout(title = "Call Type",
xaxis = list(title = "Call Type"),
yaxis = list(title = "Total Calls")) %>%
return()
}
20
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
getwd()
setwd("/Users/andrewkan/Documents/UW_2015_2016/INFO201/finalGroup/final-project")
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
shiny::runApp()
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
make_choice <- function(choice) {
newschoolData <- schoolData %>% select_(choice)
return(newschoolData)
}
input$"free" == input$free
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
make_choice <- function(choice) {
newschoolData <- schoolData %>% select_(choice)
return(newschoolData)
}
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
our_only_2012 <- filter(only_2012, grepl("BURGLARY|LIQUOR VIOLATIONS|
ASSAULTS|ROBBERY|NARCOTICS COMPLAINTS|
THREATS, HARASSMENT|HOMICIDE|WEAPONS CALLS|
CAR PROWL|SHOPLIFTING|PROSTITUTION",
Event.Clearance.Group))
select_month <- function(month) {
sorted_our_2012 <- our_only_2012 %>% group_by(Event.Clearance.Group) %>%
filter(grepl(month, Event.Clearance.Date)) %>%
summarise(total_calls = n()) %>% arrange(desc(total_calls))
summary_bar <- plot_ly(sorted_our_2012, type = "bar",
x = c(sorted_our_2012$Event.Clearance.Group),
y = c(sorted_our_2012$total_calls)) %>%
layout(title = "Call Type",
xaxis = list(title = "Call Type"),
yaxis = list(title = "Total Calls")) %>%
return()
}
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
make_choice <- function(choice) {
newschoolData <- schoolData %>% select_(choice)
return(newschoolData)
}
choose_call_group <- function(group) {
chosen_group <- only_2012 %>% filter(Event.Clearance.Group == group)
return(chosen_group)
}
schoolData <- read.csv("finalSchoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
schoolData <- read.csv("finalSchoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
schoolData <- read.csv("schoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
schoolData <- read.csv("schoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
shiny::runApp()
shiny::runApp()
schoolData <- read.csv("schoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
schoolData <- read.csv("schoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(schoolLevel == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
schoolData <- read.csv("schoolData.csv")
selectSchoolLevel <- function(gradeLevel) {
if(gradeLevel == "all") {
return(schoolData)
} else {
selectedLevel <- schoolData %>% filter(School_Level == gradeLevel)
return(selectedLevel)
}
}
selectSchoolLevel("Elementary")
shiny::runApp()
select_month("Janurary")
select_month("January")
test <- select_month("January")
test
shiny::runApp()
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
call_info <- read.csv("call_info.csv")
our_only_2012 <- filter(only_2012, grepl("BURGLARY|LIQUOR VIOLATIONS|
ASSAULTS|ROBBERY|NARCOTICS COMPLAINTS|
THREATS, HARASSMENT|HOMICIDE|WEAPONS CALLS|
CAR PROWL|SHOPLIFTING|PROSTITUTION",
Event.Clearance.Group))
select_month <- function(month) {
sorted_our_2012 <- our_only_2012 %>% group_by(Event.Clearance.Group) %>%
filter(grepl(month, Event.Clearance.Date)) %>%
summarise(total_calls = n()) %>% arrange(desc(total_calls))
summary_bar <- plot_ly(sorted_our_2012, type = "bar",
x = c(sorted_our_2012$Event.Clearance.Group),
y = c(sorted_our_2012$total_calls)) %>%
layout(title = "Call Type",
xaxis = list(title = "Call Type"),
yaxis = list(title = "Total Calls"),
margin = list("b" = 100)) %>%
return()
}
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
choose_call_group <- function(group) {
chosen_group <- only_2012 %>% filter(Event.Clearance.Group == group)
return(chosen_group)
}
