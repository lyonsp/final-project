word <- "blue"
} else if (num == 1) {
word <-  "green"
} else if (num == 2) {
word <-  "yellow"
} else if (num == 3) {
word <-  "orange"
}
return (word)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
selectMarkerColor <- function(num) {
word <- "";
if(num == 0) {
word <- "blue"
} else if (num == 1) {
word <-  "green"
} else if (num == 2) {
word <-  "yellow"
} else if (num == 3) {
word <-  "orange"
}
return (word)
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
markerColor <- ""
shinyServer(function(input, output) {
observe({
if(input$whichtype == "Percent_Free_Lunch") {
markerColor = selectMarkerColor(lunchPercent$groupPercentLunch)
} else if (input$whichtype == "Percent_Limited_English") {
markerColor = selectMarkerColor(limitedPercent$groupPercentLimited)
} else {
markerColor = selectMarkerColor(singlePercent$groupPercentSingle)
}
})
output$mymap2 <- renderLeaflet({
selected_call <- choose_call_group(input$select)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
color = "blue",
radius = 3,
stroke = FALSE)
})
output$bargraph <- renderPlotly({
select_month(input$selectx)
})
output$mymap <- renderLeaflet({
selectedSchoolLevel <- selectSchoolLevel(input$selectlevel)
leaflet() %>%
addTiles() %>%
fitBounds(min(schoolData$longitude), min(schoolData$latitude),
max(schoolData$longitude), max(schoolData$latitude)) %>%
addCircleMarkers(lng = selectedSchoolLevel$longitude, lat = selectedSchoolLevel$latitude,
color = "red",
fillOpacity = .6,
radius = 5,
stroke = FALSE,
popup = schoolData$School_Name)
})
output$schoolDataChart <- renderPlotly ({
x <- list(
title = "School Names"
)
y <- list(
title = "Number of Students"
)
title <- list(
title = "Number of Students vs Number of Free Lunches"
)
numberOfStudents <- plot_ly(schoolData,
x = School_Name,
y = Total_Students,
name = "Number Of Students",
type = "bar"
)
numberOfFreeLunches <- add_trace(
numberOfStudents,
x = School_Name,
y  = eval(parse(text = input$school_var)),
title = "blah",
xaxis = (title = "hi"),
name = "Number of Percentage"
) %>%
layout(barmode = "stack",
xaxis = x, yaxis = y,
title = "Test",
margin = list("b" = 150))
})
output$comparemap <- renderLeaflet({
selected_call <- choose_call_group(input$choose)
selected_sort <- make_choice(input$whichtype)
percentage <- eval(parse(text = input$whichtype), selected_sort)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
radius = 3,
color = "blue",
stroke = FALSE,
fillOpacity = .5,
selected_call) %>%
addCircleMarkers(lng = schoolData$longitude, lat = schoolData$latitude,
radius = percentage * 10,
color = lapply(selectMarkerColor(lunchPercent$groupPercentLunch)),
stroke = FALSE,
fillOpacity = .8,
popup = paste0(schoolData$School_Name, " ", round(percentage * 100, 3), "%"))
})
})
shiny::runApp()
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
markerColor <- ""
shinyServer(function(input, output) {
#observe({
#  if(input$whichtype == "Percent_Free_Lunch") {
#    markerColor = selectMarkerColor(lunchPercent$groupPercentLunch)
#  } else if (input$whichtype == "Percent_Limited_English") {
#    markerColor = selectMarkerColor(limitedPercent$groupPercentLimited)
#  } else {
#    markerColor = selectMarkerColor(singlePercent$groupPercentSingle)
#  }
#})
pal <- colorFactor(c("navy", "red", "green", "black"))
output$mymap2 <- renderLeaflet({
selected_call <- choose_call_group(input$select)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
color = "blue",
radius = 3,
stroke = FALSE)
})
output$bargraph <- renderPlotly({
select_month(input$selectx)
})
output$mymap <- renderLeaflet({
selectedSchoolLevel <- selectSchoolLevel(input$selectlevel)
leaflet() %>%
addTiles() %>%
fitBounds(min(schoolData$longitude), min(schoolData$latitude),
max(schoolData$longitude), max(schoolData$latitude)) %>%
addCircleMarkers(lng = selectedSchoolLevel$longitude, lat = selectedSchoolLevel$latitude,
color = "red",
fillOpacity = .6,
radius = 5,
stroke = FALSE,
popup = schoolData$School_Name)
})
output$schoolDataChart <- renderPlotly ({
x <- list(
title = "School Names"
)
y <- list(
title = "Number of Students"
)
title <- list(
title = "Number of Students vs Number of Free Lunches"
)
numberOfStudents <- plot_ly(schoolData,
x = School_Name,
y = Total_Students,
name = "Number Of Students",
type = "bar"
)
numberOfFreeLunches <- add_trace(
numberOfStudents,
x = School_Name,
y  = eval(parse(text = input$school_var)),
title = "blah",
xaxis = (title = "hi"),
name = "Number of Percentage"
) %>%
layout(barmode = "stack",
xaxis = x, yaxis = y,
title = "Test",
margin = list("b" = 150))
})
output$comparemap <- renderLeaflet({
selected_call <- choose_call_group(input$choose)
selected_sort <- make_choice(input$whichtype)
percentage <- eval(parse(text = input$whichtype), selected_sort)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
radius = 3,
color = "blue",
stroke = FALSE,
fillOpacity = .5,
selected_call) %>%
addCircleMarkers(lng = schoolData$longitude, lat = schoolData$latitude,
radius = percentage * 10,
color = ~pal(limitedPercent$groupPercentLimited),
stroke = FALSE,
fillOpacity = .8,
popup = paste0(schoolData$School_Name, " ", round(percentage * 100, 3), "%"))
})
})
shiny::runApp()
?colorFactor
shiny::runApp()
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
markerColor <- ""
shinyServer(function(input, output) {
#observe({
#  if(input$whichtype == "Percent_Free_Lunch") {
#    markerColor = selectMarkerColor(lunchPercent$groupPercentLunch)
#  } else if (input$whichtype == "Percent_Limited_English") {
#    markerColor = selectMarkerColor(limitedPercent$groupPercentLimited)
#  } else {
#    markerColor = selectMarkerColor(singlePercent$groupPercentSingle)
#  }
#})
pal <- colorFactor(c("navy", "red", "green", "black"), domain = limitedPercent$groupPercentLimited)
output$mymap2 <- renderLeaflet({
selected_call <- choose_call_group(input$select)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
color = "blue",
radius = 3,
stroke = FALSE)
})
output$bargraph <- renderPlotly({
select_month(input$selectx)
})
output$mymap <- renderLeaflet({
selectedSchoolLevel <- selectSchoolLevel(input$selectlevel)
leaflet() %>%
addTiles() %>%
fitBounds(min(schoolData$longitude), min(schoolData$latitude),
max(schoolData$longitude), max(schoolData$latitude)) %>%
addCircleMarkers(lng = selectedSchoolLevel$longitude, lat = selectedSchoolLevel$latitude,
color = "red",
fillOpacity = .6,
radius = 5,
stroke = FALSE,
popup = schoolData$School_Name)
})
output$schoolDataChart <- renderPlotly ({
x <- list(
title = "School Names"
)
y <- list(
title = "Number of Students"
)
title <- list(
title = "Number of Students vs Number of Free Lunches"
)
numberOfStudents <- plot_ly(schoolData,
x = School_Name,
y = Total_Students,
name = "Number Of Students",
type = "bar"
)
numberOfFreeLunches <- add_trace(
numberOfStudents,
x = School_Name,
y  = eval(parse(text = input$school_var)),
title = "blah",
xaxis = (title = "hi"),
name = "Number of Percentage"
) %>%
layout(barmode = "stack",
xaxis = x, yaxis = y,
title = "Test",
margin = list("b" = 150))
})
output$comparemap <- renderLeaflet({
selected_call <- choose_call_group(input$choose)
selected_sort <- make_choice(input$whichtype)
percentage <- eval(parse(text = input$whichtype), selected_sort)
leaflet() %>%
addTiles() %>%
fitBounds(min(only_2012$Longitude), min(only_2012$Latitude),
max(only_2012$Longitude), max(only_2012$Latitude)) %>%
addCircleMarkers(lng = selected_call$Longitude, lat = selected_call$Latitude,
radius = 3,
color = "blue",
stroke = FALSE,
fillOpacity = .5,
selected_call) %>%
addCircleMarkers(lng = schoolData$longitude, lat = schoolData$latitude,
radius = percentage * 10,
color = ~pal(groupPercentLimited),
stroke = FALSE,
fillOpacity = .8,
popup = paste0(schoolData$School_Name, " ", round(percentage * 100, 3), "%"))
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
selectSchoolLevel("Elementary")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
schoolData
View(schoolData)
schoolData <- schoolData %>%
select(Percent_Free_Lunch) %>%
mutate(Percent_Free_Lunch = Percent_Free_Lunch * 100) %>%
mutate(groupPercentLunch = Percent_Free_Lunch / 25) %>%
mutate(groupPercentLunch = round(groupPercentLunch, digits = 0))
schoolData <- schoolData %>%
select(Percent_One_Parent_Homes) %>%
mutate(Percent_One_Parent_Homes = Percent_One_Parent_Homes * 100) %>%
mutate(groupPercentSingle = Percent_One_Parent_Homes / 25) %>%
mutate(groupPercentSingle = round(groupPercentSingle, digits = 0))
schoolData <- schoolData %>%
select(Percent_Limited_English) %>%
mutate(Percent_Limited_English = Percent_Limited_English * 100) %>%
mutate(groupPercentLimited = Percent_Limited_English / 25) %>%
mutate(groupPercentLimited = round(groupPercentLimited, digits = 0))
schoolData <- schoolData %>%
select(Percent_Free_Lunch) %>%
mutate(Percent_Free_Lunch = Percent_Free_Lunch * 100) %>%
mutate(groupPercentLunch = Percent_Free_Lunch / 25) %>%
mutate(groupPercentLunch = round(groupPercentLunch, digits = 0))
schoolData <- schoolData %>%
select(Percent_One_Parent_Homes) %>%
mutate(Percent_One_Parent_Homes = Percent_One_Parent_Homes * 100) %>%
mutate(groupPercentSingle = Percent_One_Parent_Homes / 25) %>%
mutate(groupPercentSingle = round(groupPercentSingle, digits = 0))
View(schoolData)
schoolData <- read.csv("schoolData.csv")
View(schoolData)
schoolData <- schoolData %>%
select(Percent_Free_Lunch) %>%
mutate(Percent_Free_Lunch = Percent_Free_Lunch * 100) %>%
mutate(groupPercentLunch = Percent_Free_Lunch / 25) %>%
mutate(groupPercentLunch = round(groupPercentLunch, digits = 0))
schoolData <- schoolData %>%
schoolData <- read.csv("schoolData.csv")
schoolData <- read.csv("schoolData.csv")
shiny::runApp()
library(plotly)
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
library(plotly)
library(dplyr)
only_2012 <- read.csv("only_2012.csv")
our_only_2012 <- filter(only_2012, grepl("BURGLARY|LIQUOR VIOLATIONS|
ASSAULTS|ROBBERY|NARCOTICS COMPLAINTS|
THREATS, HARASSMENT|HOMICIDE|WEAPONS CALLS|
CAR PROWL|SHOPLIFTING|PROSTITUTION",
Event.Clearance.Group))
select_month <- function(month) {
sorted_our_2012 <- our_only_2012 %>% group_by(Event.Clearance.Group) %>%
filter(grepl(month, Event.Clearance.Date)) %>%
summarise(total_calls = n()) %>% arrange(desc(total_calls))
summary_bar <- plot_ly(sorted_our_2012, type = "bar",
x = (sorted_our_2012$Event.Clearance.Group),
y = (sorted_our_2012$total_calls)) %>%
layout(title = "Total Calls per Call Type for Given Month",
xaxis = list(title = "Call Type"),
yaxis = list(title = "Total Calls"),
margin = list("b" = 100)) %>%
return()
}
shiny::runApp()
shiny::runApp()
install.packages("shinythemes")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(markdown)
library(plotly)
library(shiny)
library(dplyr)
library(leaflet)
library(shinythemes)
#Creates a navigation bar that allows a user to switch between different tabs in the Shiny App
#Each tab contains visualizations or explanations about the data
shinyUI(navbarPage(theme = "superhero.css", "Welcome",
#Panel contains the introduction of datasets and packages
tabPanel("Introduction",
includeMarkdown("introduction.Rmd")),
#Tab contains a map and chart of 911 data. Data can be manipulated with widgets on the side.
tabPanel("911 Calls",
titlePanel("911 Call Data"),
sidebarPanel(helpText("Select specific type of incident."),
selectInput("select_call_type", label = "Select Call Type",
choices = list("Burglary" = "BURGLARY",
"Liquor" = "LIQUOR VIOLATIONS",
"Assaults" = "ASSAULTS",
"Robbery" = "ROBBERY",
"Narcotics" = "NARCOTICS COMPLAINTS",
"Threats" = "THREATS, HARASSMENT",
"Homicide" = "HOMICIDE",
"Weapons" = "WEAPONS CALLS",
"Car Prowl" = "CAR PROWL",
"Shoplifting" = "SHOPLIFTING",
"Prostitution" = "PROSTITUTION"))
),
mainPanel("Locations of 911 Calls",
leafletOutput("incident_map"),
br()),
sidebarPanel(helpText("View incidents for a specific month."),
selectInput("select_month", label = "Select Month",
choices = list("Total" = "*/12",
"January" = "^1/",
"February" = "^2/",
"March" = "^3/",
"April" = "^4/",
"May" = "^5/",
"June" = "^6/",
"July" = "^7/",
"August" = "^8/",
"September" = "^9/",
"October" = "^10/",
"November" = "^11/",
"December" = "^12/"),
selected = "2012")
),
mainPanel(plotlyOutput("incident_chart"))
),
#Tab contains a map and chart of Seattle School data.
#Data can be manipulated with widgets on the side.
tabPanel("Seattle Schools",
titlePanel("Seattle School Data"),
sidebarPanel(helpText("View schools of chosen level."),
selectInput("school_level", label = "Select School Level",
choices = list("All" = "all",
"Elementary School" = "Elementary",
"Middle School" = "Middle School",
"High School" = "High School"))
),
mainPanel("School Locations- Radius corresponds to percentage of selected variable",
leafletOutput("school_map"),
br()),
sidebarPanel(helpText("View percentages for selected option."),
selectInput("school_var", label = "Percentage Level",
choices = list("Free Lunches" = "Free_Lunches",
"Limited English" = "Limited_English",
"Single Parents" = "One_Parent_Homes"
)
)),
mainPanel(plotlyOutput("school_chart"))
),
#Tab contains a map that overlays Seattle data and 911 Call Incidents.
#Data can be manipulated with widgets on the side.
tabPanel("Comparison",
titlePanel("911 Call and Seattle School Comparison"),
sidebarPanel(helpText("Select specific type of incident."),
selectInput("comp_call_type", label = "Select Call Type",
choices = list("Assaults" = "ASSAULTS",
"Burglary" = "BURGLARY",
"Car Prowl" = "CAR PROWL",
"Homicide" = "HOMICIDE",
"Liquor" = "LIQUOR VIOLATIONS",
"Narcotics" = "NARCOTICS COMPLAINTS",
"Prostitution" = "PROSTITUTION",
"Robbery" = "ROBBERY",
"Shoplifting" = "SHOPLIFTING",
"Threats" = "THREATS, HARASSMENT",
"Weapons" = "WEAPONS CALLS"
)),
helpText("View percentages for selected option. Radius corresponds to percentage of selected variable."),
selectInput("comp_school_var", label = "Percentage Level",
choices = list("Free Lunches" = "Percent_Free_Lunch",
"Limited English" = "Percent_Limited_English",
"Single Parents" = "Percent_One_Parent_Homes"),
selected = "free"
)),
mainPanel(leafletOutput("comparemap", height = 800, width = 900))
),
tabPanel("Conclusion",
includeMarkdown("conclusion.Rmd"))
)
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
